
// Generated by dojo-bindgen on Thu, 24 Oct 2024 16:34:29 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `planetelo-queue` contract
    function queue() {
        const contract_name = "queue";

        
        // Call the `queue` system with the specified Account and calldata
        const queue = async (props: { account: Account, game: bigint, playlist: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "queue",
                        calldata: [props.game,
                props.playlist],
                    },
                    "planetelo"
                );
            } catch (error) {
                console.error("Error executing queue:", error);
                throw error;
            }
        };
            

    
        // Call the `dequeue` system with the specified Account and calldata
        const dequeue = async (props: { account: Account, game: bigint, playlist: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "dequeue",
                        calldata: [props.game,
                props.playlist],
                    },
                    "planetelo"
                );
            } catch (error) {
                console.error("Error executing dequeue:", error);
                throw error;
            }
        };
            

    
        // Call the `matchmake` system with the specified Account and calldata
        const matchmake = async (props: { account: Account, game: bigint, playlist: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "matchmake",
                        calldata: [props.game,
                props.playlist],
                    },
                    "planetelo"
                );
            } catch (error) {
                console.error("Error executing matchmake:", error);
                throw error;
            }
        };
            

    
        // Call the `settle` system with the specified Account and calldata
        const settle = async (props: { account: Account, game: bigint, game_id: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "settle",
                        calldata: [props.game,
                props.game_id],
                    },
                    "planetelo"
                );
            } catch (error) {
                console.error("Error executing settle:", error);
                throw error;
            }
        };
            

    
        // Call the `name` system with the specified Account and calldata
        const name = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "name",
                        calldata: [],
                    },
                    "planetelo"
                );
            } catch (error) {
                console.error("Error executing name:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "planetelo"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

        return {
            queue, dequeue, matchmake, settle, name, world
        };
    }

    return {
        queue: queue()
    };
}
