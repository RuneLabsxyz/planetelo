// Generated by dojo-bindgen on Tue, 22 Oct 2024 19:08:41 +0000. Do not modify this file manually.
import { Account } from "starknet";
import {
    Clause,
    Client,
    ModelClause,
    createClient,
    valueToToriiValueAndOperator,
} from "@dojoengine/torii-client";
import {
    LOCAL_KATANA,
    LOCAL_RELAY,
    LOCAL_TORII,
    createManifestFromJson,
} from "@dojoengine/core";

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: string[];
    pending_word: string;
    pending_word_len: number;
}

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: string;
    layout: Layout;
}

// Type definition for `planetelo::models::Queue` struct
export interface Queue {
    game: string;
    playlist: bigint;
    length: number;
}

// Type definition for `dojo::model::layout::Layout` enum
type Layout = { type: 'Fixed'; data: number[]; } | { type: 'Struct'; data: FieldLayout[]; } | { type: 'Tuple'; data: Layout[]; } | { type: 'Array'; data: Layout[]; } | { type: 'ByteArray'; } | { type: 'Enum'; data: FieldLayout[]; }
// Type definition for `core::option::Option::<core::integer::u32>` enum
type Option<A> = { type: 'Some'; data: A; } | { type: 'None'; }

// Type definition for `planetelo::models::QueueIndex` struct
export interface QueueIndex {
    game: string;
    playlist: bigint;
    index: number;
    player: string;
    timestamp: bigint;
    elo: bigint;
}


// Type definition for `planetelo::models::Game` struct
export interface Game {
    game: string;
    id: bigint;
    playlist: bigint;
    player1: string;
    player2: string;
    timestamp: bigint;
}


// Type definition for `planetelo::models::Elo` struct
export interface Elo {
    player: string;
    game: string;
    playlist: bigint;
    value: bigint;
}


// Type definition for `planetelo::models::Player` struct
export interface Player {
    player: string;
    games_played: number;
    queues_joined: number;
}


// Type definition for `planetelo::models::PlayerStatus` struct
export interface PlayerStatus {
    player: string;
    game: string;
    playlist: bigint;
    status: QueueStatus;
    index: number;
}

// Type definition for `planetelo::models::QueueStatus` enum
type QueueStatus = { type: 'None'; } | { type: 'Queued'; } | { type: 'InGame'; data: bigint; }

class BaseCalls {
    contractAddress: string;
    account?: Account;

    constructor(contractAddress: string, account?: Account) {
        this.account = account;
        this.contractAddress = contractAddress;
    }

    async execute(entrypoint: string, calldata: any[] = []): Promise<void> {
        if (!this.account) {
            throw new Error("No account set to interact with dojo_starter");
        }

        await this.account.execute(
            {
                contractAddress: this.contractAddress,
                entrypoint,
                calldata,
            },
            undefined,
            {
                maxFee: 0,
            }
        );
    }
}

class QueueCalls extends BaseCalls {
    constructor(contractAddress: string, account?: Account) {
        super(contractAddress, account);
    }

    async queue(game: string, playlist: bigint): Promise<void> {
        try {
            await this.execute("queue", [game,
                playlist])
        } catch (error) {
            console.error("Error executing queue:", error);
            throw error;
        }
    }

    async dequeue(game: string, playlist: bigint): Promise<void> {
        try {
            await this.execute("dequeue", [game,
                playlist])
        } catch (error) {
            console.error("Error executing dequeue:", error);
            throw error;
        }
    }

    async matchmake(game: string, playlist: bigint): Promise<void> {
        try {
            await this.execute("matchmake", [game,
                playlist])
        } catch (error) {
            console.error("Error executing matchmake:", error);
            throw error;
        }
    }

    async settle(game: string, game_id: bigint): Promise<void> {
        try {
            await this.execute("settle", [game,
                game_id])
        } catch (error) {
            console.error("Error executing settle:", error);
            throw error;
        }
    }

    async dojoInit(): Promise<void> {
        try {
            await this.execute("dojo_init", [])
        } catch (error) {
            console.error("Error executing dojoInit:", error);
            throw error;
        }
    }

    async world(): Promise<void> {
        try {
            await this.execute("world", [])
        } catch (error) {
            console.error("Error executing world:", error);
            throw error;
        }
    }

    async name(): Promise<void> {
        try {
            await this.execute("name", [])
        } catch (error) {
            console.error("Error executing name:", error);
            throw error;
        }
    }

    async namespace(): Promise<void> {
        try {
            await this.execute("namespace", [])
        } catch (error) {
            console.error("Error executing namespace:", error);
            throw error;
        }
    }

    async tag(): Promise<void> {
        try {
            await this.execute("tag", [])
        } catch (error) {
            console.error("Error executing tag:", error);
            throw error;
        }
    }

    async nameHash(): Promise<void> {
        try {
            await this.execute("name_hash", [])
        } catch (error) {
            console.error("Error executing nameHash:", error);
            throw error;
        }
    }

    async namespaceHash(): Promise<void> {
        try {
            await this.execute("namespace_hash", [])
        } catch (error) {
            console.error("Error executing namespaceHash:", error);
            throw error;
        }
    }

    async selector(): Promise<void> {
        try {
            await this.execute("selector", [])
        } catch (error) {
            console.error("Error executing selector:", error);
            throw error;
        }
    }
}

type Query = Partial<{
    Queue: ModelClause<Queue>;
    QueueIndex: ModelClause<QueueIndex>;
    Game: ModelClause<Game>;
    Elo: ModelClause<Elo>;
    Player: ModelClause<Player>;
    PlayerStatus: ModelClause<PlayerStatus>;
}>;

type ResultMapping = {
    Queue: Queue;
    QueueIndex: QueueIndex;
    Game: Game;
    Elo: Elo;
    Player: Player;
    PlayerStatus: PlayerStatus;
};

type QueryResult<T extends Query> = {
    [K in keyof T]: K extends keyof ResultMapping ? ResultMapping[K] : never;
};

// Only supports a single model for now, since torii doesn't support multiple models
// And inside that single model, there's only support for a single query.
function convertQueryToToriiClause(query: Query): Clause | undefined {
    const [model, clause] = Object.entries(query)[0];

    if (Object.keys(clause).length === 0) {
        return undefined;
    }

    const clauses: Clause[] = Object.entries(clause).map(([key, value]) => {
        return {
            Member: {
                model,
                member: key,
                ...valueToToriiValueAndOperator(value),
            },
        } satisfies Clause;
    });

    return clauses[0];
}
type GeneralParams = {
    toriiUrl?: string;
    relayUrl?: string;
    account?: Account;
};

type InitialParams = GeneralParams &
    (
        | {
                rpcUrl?: string;
                worldAddress: string;
                queueAddress: string;
            }
        | {
                manifest: any;
            }
    );

export class Planetelo {
    rpcUrl: string;
    toriiUrl: string;
    toriiPromise: Promise<Client>;
    relayUrl: string;
    worldAddress: string;
    private _account?: Account;
    queue: QueueCalls;
    queueAddress: string;

    constructor(params: InitialParams) {
        if ("manifest" in params) {
            const config = createManifestFromJson(params.manifest);
            this.rpcUrl = config.world.metadata.rpc_url;
            this.worldAddress = config.world.address;

            const queueAddress = config.contracts.find(
                (contract) =>
                    contract.name === "dojo_starter::systems::queue::queue"
            )?.address;

            if (!queueAddress) {
                throw new Error("No queue contract found in the manifest");
            }

            this.queueAddress = queueAddress;
        } else {
            this.rpcUrl = params.rpcUrl || LOCAL_KATANA;
            this.worldAddress = params.worldAddress;
            this.queueAddress = params.queueAddress;
        }
        this.toriiUrl = params.toriiUrl || LOCAL_TORII;
        this.relayUrl = params.relayUrl || LOCAL_RELAY;
        this._account = params.account;
        this.queue = new QueueCalls(this.queueAddress, this._account);

        this.toriiPromise = createClient([], {
            rpcUrl: this.rpcUrl,
            toriiUrl: this.toriiUrl,
            worldAddress: this.worldAddress,
            relayUrl: this.relayUrl,
        });
    }

    get account(): Account | undefined {
        return this._account;
    }

    set account(account: Account) {
        this._account = account;
        this.queue = new QueueCalls(this.queueAddress, this._account);
    }

    async query<T extends Query>(query: T, limit = 10, offset = 0) {
        const torii = await this.toriiPromise;

        return {
            torii,
            findEntities: async () => this.findEntities(query, limit, offset),
        };
    }

    async findEntities<T extends Query>(query: T, limit = 10, offset = 0) {
        const torii = await this.toriiPromise;

        const clause = convertQueryToToriiClause(query);

        const toriiResult = await torii.getEntities({
            limit,
            offset,
            clause,
        });

        return toriiResult as Record<string, QueryResult<T>>;
    }

    async findEntity<T extends Query>(query: T) {
        const result = await this.findEntities(query, 1);

        if (Object.values(result).length === 0) {
            return undefined;
        }

        return Object.values(result)[0] as QueryResult<T>;
    }
}