
fn shoot(world: IWorldDispatcher, ref positions: Array<CharacterPosition>, ref bullets: Array<Bullet>, shot: Shot, step: u16) {
    for character in positions {
        let bullet = BulletTrait::new(
            world.uuid(), 
            Vec2 {x: character.coords.x, y: character.coords.y}, 
            shot.angle, 
            character.id,
            step
        );
        bullets.append(bullet);
        set!(world, (bullet));
    }
}

if sub_move_index == next_shot_t1.into() {
    //check for shots
    let shot = m1.shots.pop_front().unwrap();
    shoot(world, ref m1_positions, ref bullets, shot, step.try_into().unwrap());                    
}

if sub_move_index == next_shot_t2.into() {
    let shot = m2.shots.pop_front().unwrap();
    shoot(world, ref m2_positions, ref bullets, shot, step.try_into().unwrap());
}

if sub_move_index == next_shot_t3.into() {
    let shot = m3.shots.pop_front().unwrap();
    shoot(world, ref m3_positions, ref bullets, shot, step.try_into().unwrap());
}